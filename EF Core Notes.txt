Entity Framework Core 
---------------------
Select data from Employees Table
--------------------------------
ADO.NET 
-------
SqlConnection conn = new SqlConnection(connectionstring);

SqlCommand cmd = new SqlCommand("select * from Employees",conn);

conn.Open();

SqlDataReader reader = cmd.ExecuteReader();

if(reader.HasRows)
{
	while(reader.Read())
	{
		//logic to read data
	}
}
else
{
	//code 
} 

reader.Close();
conn.Close();

EF or EF Core 
-------------
MyContext context = new MyContext();

var data = context.Employees.ToList();

foreach(var emp in data)
{
	//logic to display emp data
}

Entity Framework 6.x - .NET Framework

Entity Framework Core 
---------------------
It is the new version of the Entity Framework
It is based on the principle of .NET Core 
It is light-weight and cross platform(windows,linux,mac) in nature 
It work with .NET Core as well as with the .NET Framework
It provides different providers that helps us connect with a variety of database server 

What is ORM ?
--------------
ORM stands for Object Relational Mapping / Mapper 
It is technique used to map object-oriented classes to database table 

Approaches to Implement EF 6.x
-------------------------------
Code-First - C# Code  
Model-First - Visual Designer 
Database-First 

Approaches to Implement EF Core 
-------------------------------
Code-First 
Reverse Engineering (Database-First)- Scaffold-DbContext

Practical 
---------
1)Create a Console Application 
2)Add the Entity Framework Core Libraries 

	Microsoft.EntityFrameworkCore - Core Library 
	Microsoft.EntityFrameworkCore.SqlServer - Data Provider
	Microsoft.EntityFrameworkCore.Tools - Provide CLI Commands for migration and other features 
	Microsoft.EntityFrameworkCore.Design
	
	Visual Studio - Install the above package using the Nuget Package Manager 
	
	Visual Studio Code - Use the following commands to install the packages 
	
	dotnet add package Microsoft.EntityFrameworkCore --version 6.0.15
	dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 6.0.15
	dotnet add package Microsoft.EntityFrameworkCore.Tools --version
	6.0.15
	dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.15
	
3)Create database context and model classes  
4)Perform basic database operations

Creating a Primary Key 
----------------------
To create a primary key , add an auto-implemented property in the class with the name as ID or Id or ClassNameId i.e. ProductId

EF core will automatically create the primary key with identity

Create and Drop API 
-------------------
The EnsureCreated() and EnsureDeleted() methods provides a light-weight alternative to Migrations for managing the database schema.
These methods are useful in scenarios when data is transient and can be dropped when the schema changes.

Migrations
----------
In EF Core, Migrations allows us to keep the model and database in sync 

Install the EF Core tools (VS Code)
-------------------------
dotnet tool install --global dotnet-ef 

dotnet tool update --global dotnet-ef 

dotnet ef  - list details about the tool 

dotnet ef migrations add <<nameofmigration>>

dotnet ef database update 

Seeding of data - OnModelCreating()

LINQ
----
LINQ stands for Language Integrated Query
Using LINQ, we can write sql like queries in programming language like C# and VB.NET 
It provide all the capabilities of the SQL query and perform compile time check 

Old-Way 

	var query = from data in datasource 
				where|orderby......
				select data;
				
	var prods= from p in products
			   select p;
			   
			   
Extension Method 
	Provide alot methods to simplify the LINQ queries 
	
dotnet add package Microsoft.Extensions.Logging.Console --version 6.0.0

Stored Procedure 
Function 

RAW SQL Queries 
---------------
FromSqlRaw()
FromSqlInterpolated()

Concurrency in EF Core
----------------------
Using Concurrency Token
-----------------------
Consider there are multiple users in a database and all of them are working concurrently. So when the EF Core detects data using the ConcurrencyCheck attribute, it performs a comparison of the values of that entity.

If the values of the entities match then the operation is performed sucessfully, but if these values of the same entity differ from each other than that means there are concurrency confilcts in that entity due to multiple concurrent users

Data Annotations 
----------------
public class Actor 
{
	public int ActorId {get;set;}
	[ConcurrencyCheck]
	public string LName{get;set;}
	public string FName{get;set;}
}

Fluent API 
----------

protected override void OnModelCreating(ModelBuilder modelBuilder)
{
	modelBuilder.Entity<Actor>()
			.Property(p=>p.LName)
			.IsConcurrencyToken();
}

Using RowVersion Property
-------------------------
In the RowVersion property , a new column is added to the database table and it stores the version stamp of the data. A new Row version value is added eachtime a user updates the data

	-If two users are working on the same database and the first user updates the data and leave , then the Second updates the data ane leave 
	
	-Then EF Core will compare both the update Row version properties and if the values match the operation is performed successfully
	
	-Otherwise, if both the Row Version values differs the operation gives a DbUpdateConcurrencyException 
	
Data Annotations
----------------
class Movie
{
	public int MovieId{get;set;}
	public string Title{get;set;}
	
	[TimeStamp]
	public byte[] TimeStamo{get;set;}
}

Fluent API 
----------
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
	modelBuilder.Entity<Movie>()
		.Property(p=>p.TimeStamp)
		.IsRowVersion();
}

Relationship in EF Core 
-----------------------
Relationship defines how two or more entites are related to each other 
In Database this done with the help of primary and foreign key relationship 

One to One (Vehicle--->Registration)
One to Many (Department--->Employees)
Many to Many (Employee ---> Project)

Principal Entity - Entity that contains primary key also refered as Parent
Dependent Entity - Entity that contains foreign key also refered as Child 

Principal Key - Key which uniquely identifies the principle entity 
Foreign Key - Property in the dependent entity that use principal key as related key 

Navigation Key - A Property defined on the principal or dependent entity that references the related entity

Approaches to Implement Relationship in EF Core 
-----------------------------------------------
EF Core Conventions 
Data Annotations
Fluent API 
	-EF Fluent API is used to configure domain classes to override conventions 
	-EF Fluent API is based on the Fluent API Design Pattern i.e. Fluent interfaces where the results are formulated by method chaining 
	-In EF Core, ModelBuilder class acts as a Fluent API,by using it we can configure many different things as it provides more configuration options than other approaches 
	
		Model Configuration
		Entity Configuration	
		Property Configuration
		
EF Core Conventions 
	One to One (Employee --> EmployeeAddress)
	
Visual Studio 
-------------
Nuget Packmanager Console 

	Add-Migration <<migrationname>>
	Remove-Migration - to remove the recent migration
	Update-Database - to apply the migration to database